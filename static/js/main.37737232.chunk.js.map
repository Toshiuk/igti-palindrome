{"version":3,"sources":["App.jsx","index.jsx"],"names":["App","useState","word","setWord","wordSanitized","toLowerCase","replaceAll","isPalindrome","split","reverse","join","x","useSpring","from","config","duration","className","name","autofocus","onfocus","value","onChange","e","target","div","style","marginTop","fontSize","opacity","interpolate","range","output","transform","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAyDeA,EArDH,WACV,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAgBF,EAAKG,cAAcC,WAAW,IAAK,IAEnDC,EACJH,IAAkBA,EAAcI,MAAM,IAAIC,UAAUC,KAAK,IAEnDC,EAAMC,oBAAU,CACtBC,KAAM,CAAEF,EAAG,GACXA,EAAGJ,EAAe,EAAI,EACtBO,OAAQ,CAAEC,SAAU,OAHdJ,EAMR,OACE,sBAAKK,UAAS,cAAST,EAAe,eAAiB,mBAAvD,UACE,gCACE,4DACA,uBACEU,KAAK,OACLC,UAAU,YACVC,QAAQ,gBACRC,MAAOlB,EACPmB,SAAU,SAACC,GAAD,OAAOnB,EAAQmB,EAAEC,OAAOH,UAEpC,cAAC,WAASI,IAAV,CACEC,MAAO,CACLC,UAAW,OACXC,SAAU,MACVC,QAASjB,EAAEkB,YAAY,CAAEC,MAAO,CAAC,EAAG,GAAIC,OAAQ,CAAC,GAAK,KACtDC,UAAWrB,EACRkB,YAAY,CACXC,MAAO,CAAC,EAAG,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAC/CC,OAAQ,CAAC,EAAG,IAAM,GAAK,IAAK,GAAK,IAAK,KAAM,KAE7CF,aAAY,SAAClB,GAAD,sBAAgBA,EAAhB,SAVnB,SAaGJ,EAAe,aAAe,sBAGnC,sBAAKS,UAAU,UAAf,UACE,uGACyE,IACvE,uBAFF,6DAKA,4EC9CRiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.37737232.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { animated, useSpring } from \"react-spring\";\n\nconst App = () => {\n  const [word, setWord] = useState(\"\");\n\n  const wordSanitized = word.toLowerCase().replaceAll(\" \", \"\");\n\n  const isPalindrome =\n    wordSanitized === wordSanitized.split(\"\").reverse().join(\"\");\n\n  const { x } = useSpring({\n    from: { x: 0 },\n    x: isPalindrome ? 1 : 0,\n    config: { duration: 1000 },\n  });\n\n  return (\n    <div className={`App ${isPalindrome ? \"isPalindrome\" : \"isNotPalindrome\"}`}>\n      <div>\n        <h1>Is this word a palindrome?</h1>\n        <input\n          name=\"word\"\n          autofocus=\"autofocus\"\n          onfocus=\"this.select()\"\n          value={word}\n          onChange={(e) => setWord(e.target.value)}\n        ></input>\n        <animated.div\n          style={{\n            marginTop: \"20px\",\n            fontSize: \"2em\",\n            opacity: x.interpolate({ range: [0, 1], output: [0.3, 1] }),\n            transform: x\n              .interpolate({\n                range: [0, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 1],\n                output: [1, 0.97, 0.9, 1.1, 0.9, 1.1, 1.03, 1],\n              })\n              .interpolate((x) => `scale(${x})`),\n          }}\n        >\n          {isPalindrome ? \"Yes it is!\" : \"No it's not :c\"}\n        </animated.div>\n      </div>\n      <div className=\"credits\">\n        <p>\n          *Blue background when it is a palindrome, red background when it's not{\" \"}\n          <br />\n          *The word is case insensitive and whitespace is ignored\n        </p>\n        <p>Igti: Fl√°vio Toshiuk Hirahata Jr.</p>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}