{"version":3,"sources":["App.jsx","index.jsx"],"names":["App","useState","word","setWord","isPalindrome","toLowerCase","replace","split","reverse","join","className","name","autofocus","onfocus","value","onChange","e","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAgCeA,EA7BH,WACV,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EACJF,IAASA,EAAKG,cAAcC,QAAQ,KAAKC,MAAM,IAAIC,UAAUC,KAAK,IACpE,OACE,sBAAKC,UAAS,cAASN,EAAe,eAAiB,mBAAvD,UACE,gCACE,4DACA,uBACEO,KAAK,OACLC,UAAU,YACVC,QAAQ,gBACRC,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAAOb,EAAQa,EAAEC,OAAOH,aAGtC,sBAAKJ,UAAU,UAAf,UACE,uGACyE,IACvE,uBAFF,6DAKA,4ECrBRQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.5a584e98.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [word, setWord] = useState(\"\");\n\n  const isPalindrome =\n    word === word.toLowerCase().replace(\" \").split(\"\").reverse().join(\"\");\n  return (\n    <div className={`App ${isPalindrome ? \"isPalindrome\" : \"isNotPalindrome\"}`}>\n      <div>\n        <h1>Is this word a palindrome?</h1>\n        <input\n          name=\"word\"\n          autofocus=\"autofocus\"\n          onfocus=\"this.select()\"\n          value={word}\n          onChange={(e) => setWord(e.target.value)}\n        ></input>\n      </div>\n      <div className=\"credits\">\n        <p>\n          *Blue background when it is a palindrome, red background when it's not{\" \"}\n          <br />\n          *The word is case insensitive and whitespace is ignored\n        </p>\n        <p>Igti: Fl√°vio Toshiuk Hirahata Jr.</p>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}